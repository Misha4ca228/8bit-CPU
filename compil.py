opcode_map = {
    "NOP":  0b00000000,
    "LDI":  0b00000001,
    "LD":   0b00000010,
    "ST":   0b00000011,
    "MOV":  0b00000100,
    "ADD":  0b00000101,
    "ADDI": 0b00000110,
    "SUB":  0b00000111,
    "SUBI": 0b00001000,
    "DIV":  0b00001001,
    "MOD":  0b00001010,
    "INC":  0b00001011,
    "DEC":  0b00001100,
    "JMP":  0b00001101,
    "JZ":   0b00001110,
    "JNZ":  0b00001111,
    "STI":  0b00010000,
    "HALT": 0b11111111,
}

operand_count = {
    "NOP":  0, "HALT": 0,
    "LDI": 2, "LD": 2, "ST": 2,
    "MOV": 2, "ADD": 2, "ADDI": 2,
    "SUB": 2, "SUBI": 2,
    "INC": 1, "DEC": 1,
    "JMP": 1, "JZ": 2, "JNZ": 2,
    "DIV": 2, "STI": 2,
    "MOD": 2,
}


def compile_program(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        lines = f.readlines()

    # ---------- –ü–ï–†–í–´–ô –ü–†–û–•–û–î ----------
    labels = {}
    addr = 0

    for line_num, line in enumerate(lines, start=1):
        line = line.split("#")[0].strip()
        if not line:
            continue

        # üí° –ú–µ—Ç–∫–∞
        if line.endswith(":"):
            label_name = line[:-1].strip()
            if not label_name.isidentifier():
                raise SyntaxError(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –º–µ—Ç–∫–∏ '{label_name}' (—Å—Ç—Ä–æ–∫–∞ {line_num})")
            if label_name in labels:
                raise SyntaxError(f"–ú–µ—Ç–∫–∞ '{label_name}' —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ (—Å—Ç—Ä–æ–∫–∞ {line_num})")
            labels[label_name] = addr
            continue

        if not line.endswith(";"):
            raise SyntaxError(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ (—Å—Ç—Ä–æ–∫–∞ {line_num}): —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è ';'")
        line = line[:-1].strip()

        # ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö $ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        if "$" in line and not any(op in line.split()[0].upper() for op in opcode_map):
            parts = [p.strip() for p in line.replace(",", " ").split() if p.strip()]
            for p in parts:
                if not p.startswith("$"):
                    raise SyntaxError(f"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö '{p}' (—Å—Ç—Ä–æ–∫–∞ {line_num})")
                addr += 1
            continue

        # –ö–æ–º–∞–Ω–¥–∞
        parts = line.replace(",", " ").split()
        instr = parts[0].upper()
        if instr not in opcode_map:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è '{instr}' (—Å—Ç—Ä–æ–∫–∞ {line_num})")
        addr += 1 + operand_count[instr]

    # ---------- –í–¢–û–†–û–ô –ü–†–û–•–û–î ----------
    bytecode = []

    for line_num, line in enumerate(lines, start=1):
        line = line.split("#")[0].strip()
        if not line or line.endswith(":"):
            continue

        # –°—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è ';' ‚Äî –Ω–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–Ω–æ–≥–æ ';' –≤–Ω—É—Ç—Ä–∏
        if ";" not in line:
            raise SyntaxError(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ (—Å—Ç—Ä–æ–∫–∞ {line_num}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ';' –≤ –∫–æ–Ω—Ü–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö")

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ ';' –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
        segments = [seg.strip() for seg in line.split(";") if seg.strip()]

        for segment in segments:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if not segment:
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö $ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            if "$" in segment and not any(op in segment.split()[0].upper() for op in opcode_map):
                # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ $1, $2, $3
                data_parts = [p.strip() for p in segment.replace(",", " ").split() if p.strip()]
                for p in data_parts:
                    if not p.startswith("$"):
                        raise SyntaxError(f"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö '{p}' (—Å—Ç—Ä–æ–∫–∞ {line_num})")
                    val_str = p[1:].strip()
                    if val_str.startswith(("0x", "0b")):
                        val = int(val_str, 0)  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 0x.., 0b..
                    elif val_str.isdigit():
                        val = int(val_str)
                    else:
                        raise ValueError(f"–ü–æ—Å–ª–µ '$' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ (—Å—Ç—Ä–æ–∫–∞ {line_num})")
                    if not (0 <= val <= 255):
                        raise ValueError(f"–ó–Ω–∞—á–µ–Ω–∏–µ {val} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0‚Äì255 (—Å—Ç—Ä–æ–∫–∞ {line_num})")
                    bytecode.append(val)
                continue

            # –û–±—ã—á–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
            parts = segment.replace(",", " ").split()
            instr = parts[0].upper()

            if instr not in opcode_map:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è '{instr}' (—Å—Ç—Ä–æ–∫–∞ {line_num})")

            bytecode.append(opcode_map[instr])

            for operand in parts[1:]:
                if operand in labels:
                    value = labels[operand]
                elif operand.isdigit():
                    value = int(operand)
                else:
                    raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞–Ω–¥ '{operand}' (—Å—Ç—Ä–æ–∫–∞ {line_num})")

                if not (0 <= value <= 255):
                    raise ValueError(f"–û–ø–µ—Ä–∞–Ω–¥ {value} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0‚Äì255 (—Å—Ç—Ä–æ–∫–∞ {line_num})")
                bytecode.append(value)

    if len(bytecode) > 256:
        raise ValueError("–°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (–º–∞–∫—Å 256 –±–∞–π—Ç)")

    return bytecode



# ---------------------------
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# ---------------------------
if __name__ == "__main__":
    bytecode = compile_program("program.txt")
    print(f"\n–†–∞–∑–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã: {len(bytecode)} –±–∞–π—Ç")
    print(f"–°–≤–æ–±–æ–¥–Ω–æ: {256 - len(bytecode)} –±–∞–π—Ç\n")
    print("–ë–∞–π—Ç-–∫–æ–¥:")
    print(", ".join(f"0b{val:08b}" for val in bytecode))
